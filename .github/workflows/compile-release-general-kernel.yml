name: Compile release general kernel

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      kernel_sign:
        description: "Set the kernel custom signature"
        required: false
        default: "-ophub"
        type: choice
        options:
          - -ophub
          - -happy-new-year
          - -dragon-boat-festival
          - -mid-autumn-festival
          - -happy-national-day
          - -merry-christmas
          - -spring-plowing
          - -summer-growing
          - -autumn-harvesting
          - -winter-storing
          - -1-7d9483ff60109a7caf36266e8917014e
      kernel_config:
        description: "Set the path of kernel .config"
        required: false
        default: "kernel-config/release/general"
        type: choice
        options:
          - kernel-config/release/general
          - false

env:
  TZ: America/New_York
  KERNEL_VERSION: "5.15.162"

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_armbian)
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        id: disk
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner.runner /builder
          df -Th

      - name: Modify armbian_compile_kernel_script.sh
        run: |
            script_path="/home/runner/work/_actions/kemp-zz/amlogic-s9xxx-armbian/main/compile-kernel/tools/script/armbian_compile_kernel_script.sh"
    
            # 备份原始脚本
            cp $script_path ${script_path}.bak
    
            # 修改 error_msg 函数
            sed -i 's/exit 1/echo "Error occurred but continuing..."/g' $script_path
    
            # 直接修改为 5.15.162 版本
            sed -i 's/^build_kernel=(.*)$/build_kernel=("5.15.162")/' $script_path
            sed -i 's/^auto_kernel="true"/auto_kernel="false"/' $script_path
            sed -i 's/^kernel_version=.*/kernel_version="5.15.162"/' $script_path
    
            # 修改 init_var 函数，添加更多输出
            sed -i '/^init_var(/,/^}/c\
            init_var() {\
                echo -e "${STEPS} Start Initializing Variables..."\
                build_kernel=("5.15.162")\
                auto_kernel="false"\
                kernel_version="5.15.162"\
                custom_name="${{ inputs.kernel_sign }}"\
                package_list="all"\
                auto_patch="false"\
                repo_owner="unifreq"\
                toolchain_name="gcc"\
                compress_format="xz"\
                echo "Variables initialized:"\
                echo "build_kernel=${build_kernel[@]}"\
                echo "auto_kernel=${auto_kernel}"\
                echo "kernel_version=${kernel_version}"\
            }' $script_path
    
            # 修改 get_kernel_source 函数，添加更多输出
            sed -i '/^get_kernel_source(/,/^}/c\
            get_kernel_source() {\
                cd ${current_path}\
                echo -e "${STEPS} Start downloading the kernel source code..."\
                [[ -d "${kernel_path}" ]] || mkdir -p ${kernel_path}\
                server_kernel_repo="unifreq/linux-5.15.y"\
                local_kernel_path="linux-5.15.162"\
                echo "Cloning from: https://github.com/${server_kernel_repo} -b v5.15.162"\
                if [[ ! -d "${kernel_path}/${local_kernel_path}" ]]; then\
                    git clone -q --single-branch --depth=1 --branch=v5.15.162 https://github.com/${server_kernel_repo} ${kernel_path}/${local_kernel_path}\
                    echo "Clone result: $?"\
                else\
                    echo "Kernel source already exists, skipping clone."\
                fi\
                rm -f ${kernel_path}/${local_kernel_path}/localversion\
            }' $script_path
    
            # 打印修改后的关键部分
            echo "Modified script contents:"
            grep -n "^build_kernel=" $script_path
            grep -n "^auto_kernel=" $script_path
            grep -n "^kernel_version=" $script_path
            grep -n "init_var(" $script_path -A 20
            grep -n "get_kernel_source(" $script_path -A 20
    
            # 执行脚本并捕获输出
            bash $script_path || echo "Script exited with non-zero status"
      - name: Compile the kernel
        uses: kemp-zz/amlogic-s9xxx-armbian@main
        if: ${{ steps.mapped.outputs.status }} == 'success' && !cancelled()
        with:
          build_target: kernel
          kernel_version: 5.15.162
          kernel_auto: false
          kernel_source: unifreq
          kernel_sign: ${{ inputs.kernel_sign }}
          kernel_config: ${{ inputs.kernel_config }}

      - name: Upload Kernel to Release
        uses: ncipollo/release-action@main
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        with:
          tag: kernel_stable
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug information
        if: always()
        run: |
          echo "Kernel version: 5.15.162"
          echo "Auto kernel: false"
          echo "Build kernel array:"
          grep "^build_kernel=" $script_path || echo "build_kernel not found"
          echo "Current directory contents:"
          ls -R /home/runner/work/_actions/kemp-zz/amlogic-s9xxx-armbian/main/compile-kernel || echo "Directory not found"
          echo "Compile log (if exists):"
          cat /home/runner/work/_actions/kemp-zz/amlogic-s9xxx-armbian/main/compile-kernel/compile.log || echo "Compile log not found"
