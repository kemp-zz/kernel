name: Compile release general kernel

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      kernel_source:
        description: "Select the kernel source"
        required: false
        default: "unifreq"
        type: choice
        options:
          - unifreq
          - codesnas
      kernel_version:
        description: "Select kernel version"
        required: false
        default: "5.15.162"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 5.15.162
          - 6.1.y
          - 6.6.y
          - 6.1.y_6.6.y
          - 5.15.y_5.10.y
      kernel_auto:
        description: "Auto use the latest kernel"
        required: false
        default: false
        type: boolean
      kernel_package:
        description: "Select compile package list"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - dtbs
      kernel_toolchain:
        description: "Select the compilation toolchain"
        required: false
        default: "gcc"
        type: choice
        options:
          - clang
          - gcc
          - gcc-11.3
          - gcc-12.2
          - gcc-12.3
          - gcc-13.2
          - gcc-13.3
      compress_format:
        description: "Set the initrd compression format"
        required: false
        default: "xz"
        type: choice
        options:
          - xz
          - gzip
          - zstd
          - lzma
      kernel_sign:
        description: "Set the kernel custom signature"
        required: false
        default: "-ophub"
        type: choice
        options:
          - -ophub
          - -happy-new-year
          - -dragon-boat-festival
          - -mid-autumn-festival
          - -happy-national-day
          - -merry-christmas
          - -spring-plowing
          - -summer-growing
          - -autumn-harvesting
          - -winter-storing
          - -1-7d9483ff60109a7caf36266e8917014e
      kernel_config:
        description: "Set the path of kernel .config"
        required: false
        default: "kernel-config/release/general"
        type: choice
        options:
          - kernel-config/release/general
          - false

env:
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_armbian)
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        id: disk
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner.runner /builder
          df -Th

      - name: Set kernel version
        run: |
          echo "KERNEL_VERSION=${{ inputs.kernel_version }}" >> $GITHUB_ENV
          echo "AUTO_KERNEL=false" >> $GITHUB_ENV
  
      - name: Modify armbian_compile_kernel_script.sh
        run: |
          script_path="/home/runner/work/_actions/kemp-zz/amlogic-s9xxx-armbian/main/compile-kernel/tools/script/armbian_compile_kernel_script.sh"
          
          # 直接修改关键变量
          sed -i 's/^build_kernel=(.*)/build_kernel=("${{ inputs.kernel_version }}")/' $script_path
          sed -i 's/^auto_kernel="true"/auto_kernel="false"/' $script_path
          sed -i 's/^kernel_version=.*/kernel_version="${{ inputs.kernel_version }}"/' $script_path
        
          # 修改 get_kernel_source 函数
          sed -i '/^get_kernel_source(/,/^}/c\
          get_kernel_source() {\
          cd ${current_path}\
          echo -e "${STEPS} Start downloading the kernel source code..."\
          [[ -d "${kernel_path}" ]] || mkdir -p ${kernel_path}\
          kernel_version="${{ inputs.kernel_version }}"\
          build_kernel=("${kernel_version}")\
          kernel_verpatch="$(echo ${kernel_version} | awk -F '"'"'."'"'" '"'"'{print $1"."$2}'"'"')"\
          server_kernel_repo="${code_owner}/linux-${kernel_verpatch}.y"\
          local_kernel_path="linux-${kernel_verpatch}.y"\
          if [[ ! -d "${kernel_path}/${local_kernel_path}" ]]; then\
            echo -e "${INFO} Start cloning from [ https://github.com/${server_kernel_repo} -b v${kernel_version} ]"\
            git clone --depth=1 --single-branch --branch=v${kernel_version} https://github.com/${server_kernel_repo} ${kernel_path}/${local_kernel_path}\
            if [ $? -ne 0 ]; then\
              echo "Failed to clone kernel source"\
              exit 1\
            fi\
          fi\
          rm -f ${kernel_path}/${local_kernel_path}/localversion\
          [[ "${auto_patch}" == "true" || "${auto_patch}" == "yes" ]] && apply_patch\
          }' $script_path
        
          # 修改 compile_kernel 函数
          sed -i '/^compile_kernel(/,/^}/c\
          compile_kernel() {\
            cd ${kernel_path}/${local_kernel_path}\
            echo "Current directory: $(pwd)"\
            echo "Kernel version: ${kernel_version}"\
            echo "Local kernel path: ${local_kernel_path}"\
            make ${MAKE_SET_STRING} Image modules dtbs -j${PROCESS}\
            if [ $? -eq 0 ]; then\
              echo "Kernel compilation successful"\
            else\
            echo "Kernel compilation failed"\
            exit 1\
          fi\
          make ${MAKE_SET_STRING} INSTALL_MOD_PATH=${output_path}/modules modules_install\
          if [ $? -eq 0 ]; then\
            echo "Modules installation successful"\
            echo "Contents of ${output_path}/modules/lib/modules:"\
            ls -R ${output_path}/modules/lib/modules\
          else\
            echo "Modules installation failed"\
            exit 1\
          fi\
          STRIP="${CROSS_COMPILE}strip"\
          find ${output_path}/modules -name "*.ko" -print0 | xargs -0 ${STRIP} --strip-debug 2>/dev/null\
          headers_install\
          }' $script_path
        
          # 打印修改后的关键部分
          echo "Modified script contents:"
          grep -n "^build_kernel=" $script_path
          grep -n "^auto_kernel=" $script_path
          grep -n "^kernel_version=" $script_path
          grep -n "get_kernel_source(" $script_path -A 20
          grep -n "compile_kernel(" $script_path -A 20

      - name: Compile the kernel
        uses: kemp-zz/amlogic-s9xxx-armbian@main
        if: ${{ steps.mapped.outputs.status }} == 'success' && !cancelled()
        env:
         KERNEL_VERSION: ${{ env.KERNEL_VERSION }}
         AUTO_KERNEL: ${{ env.AUTO_KERNEL }}
        with:
          build_target: kernel
          kernel_version: ${{ env.KERNEL_VERSION }}
          kernel_auto: ${{ env.AUTO_KERNEL }}
          kernel_source: ${{ inputs.kernel_source }}
          kernel_sign: ${{ inputs.kernel_sign }}
          kernel_config: ${{ inputs.kernel_config }}
          kernel_package: ${{ inputs.kernel_package }}
          kernel_toolchain: ${{ inputs.kernel_toolchain }}
          compress_format: ${{ inputs.compress_format }}

      - name: Debug information
        if: always()
        run: |
          echo "Kernel version: ${{ env.KERNEL_VERSION }}"
          echo "Auto kernel: ${{ env.AUTO_KERNEL }}"
          echo "Contents of current directory:"
          ls -R
          echo "Contents of /home/runner/work/_actions/kemp-zz/amlogic-s9xxx-armbian/main/compile-kernel:"
          ls -R /home/runner/work/_actions/kemp-zz/amlogic-s9xxx-armbian/main/compile-kernel || true

      - name: Upload Kernel to Release
        uses: ncipollo/release-action@main
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        with:
          tag: kernel_stable
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
