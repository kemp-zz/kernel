name: Compile release general kernel

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      kernel_version:
        description: "Select kernel version"
        required: false
        default: "5.15.162"
        type: string
      kernel_auto:
        description: "Auto use the latest kernel"
        required: false
        default: false
        type: boolean
      kernel_package:
        description: "Select compile package list"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - dtbs
      kernel_toolchain:
        description: "Select the compilation toolchain"
        required: false
        default: "gcc"
        type: choice
        options:
          - clang
          - gcc
          - gcc-11.3
          - gcc-12.2
          - gcc-12.3
          - gcc-13.2
          - gcc-13.3
      kernel_sign:
        description: "Set the kernel custom signature"
        required: false
        default: "-1-7d9483ff60109a7caf36266e8917014e"
        type: string
      kernel_config:
        description: "Set the path of kernel .config"
        required: false
        default: "kernel-config/release/general"
        type: string
      compress_format:
        description: "Set the initrd compression format"
        required: false
        default: "xz"
        type: choice
        options:
          - xz
          - gzip
          - zstd
          - lzma

env:
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id == github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_armbian)
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clone kernel source
        run: |
          git clone --depth 1 https://github.com/unifreq/linux-5.15.y.git -b main kernel-source
          cd kernel-source
          git fetch --depth=1 origin 244dce52c74abd24de772a07f83522493c888412
          git checkout FETCH_HEAD

      - name: Verify and adjust kernel version
        run: |
          cd kernel-source
          echo "Checking kernel version..."
          CURRENT_VERSION=$(make kernelversion)
          EXPECTED_VERSION="5.15.162"
          
          echo "Current version: $CURRENT_VERSION"
          echo "Expected version: $EXPECTED_VERSION"
          
          if [[ "$CURRENT_VERSION" != "$EXPECTED_VERSION" ]]; then
            echo "Version mismatch. Adjusting Makefile..."
            
            # Update VERSION, PATCHLEVEL, and SUBLEVEL in the main Makefile
            sed -i 's/^VERSION = .*/VERSION = 5/' Makefile
            sed -i 's/^PATCHLEVEL = .*/PATCHLEVEL = 15/' Makefile
            sed -i 's/^SUBLEVEL = .*/SUBLEVEL = 162/' Makefile
            sed -i 's/^EXTRAVERSION = .*/EXTRAVERSION = /' Makefile
            
            # Update lib/Makefile
            sed -i 's/Up to [0-9.]\+/Up to 5.15.162/' lib/Makefile
            
            echo "Makefile updated. New version:"
            grep -E "^VERSION|^PATCHLEVEL|^SUBLEVEL|^EXTRAVERSION" Makefile
            
            echo "lib/Makefile updated. New version:"
            grep "Up to" lib/Makefile
            
            # Verify the changes
            NEW_VERSION=$(make kernelversion)
            if [[ "$NEW_VERSION" != "$EXPECTED_VERSION" ]]; then
              echo "Error: Failed to update version to $EXPECTED_VERSION. Current version is still $NEW_VERSION"
              exit 1
            fi
          else
            echo "Version is correct. No changes needed."
          fi
          
          # Final check
          echo "Final kernel version:"
          make kernelversion
          echo "Main Makefile version info:"
          grep -E "^VERSION|^PATCHLEVEL|^SUBLEVEL|^EXTRAVERSION" Makefile
          echo "lib/Makefile version info:"
          grep "Up to" lib/Makefile


      - name: Compile Kernel
        if: success()
        uses: kemp-zz/amlogic-s9xxx-armbian@main
        with:
          build_target: kernel
          kernel_version: ${{ github.event.inputs.kernel_version }}
          kernel_auto: false
          kernel_package: ${{ github.event.inputs.kernel_package }}
          kernel_toolchain: ${{ github.event.inputs.kernel_toolchain }}
          kernel_sign: ${{ github.event.inputs.kernel_sign }}
          kernel_config: ${{ github.event.inputs.kernel_config }}
          compress_format: ${{ github.event.inputs.compress_format }}
        env:
          ACTIONS_STEP_DEBUG: true

      - name: Check Compilation Logs
        if: failure()
        run: |
          echo "Checking compilation logs..."
          LOG_FILE="/home/runner/work/_actions/kemp-zz/amlogic-s9xxx-armbian/main/compile-kernel/output/compile.log"
          if [ -f "$LOG_FILE" ]; then
            echo "Last 100 lines of compile.log:"
            tail -n 100 "$LOG_FILE"
          else
            echo "compile.log not found. Checking general output..."
            find /home/runner/work/_actions -name "*.log" -type f -print0 | xargs -0 tail -n 50
          fi
          
          echo "Disk space usage:"
          df -h
          
          echo "Memory usage:"
          free -h

      - name: Upload Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compilation-logs
          path: |
            /home/runner/work/_actions/kemp-zz/amlogic-s9xxx-armbian/main/compile-kernel/output/*.log
            /home/runner/work/_actions/**/*.log

      - name: Upload Kernel to Release
        if: ${{ env.PACKAGED_STATUS == 'success' && !cancelled() }}
        uses: ncipollo/release-action@main
        with:
          tag: kernel_${{ github.event.inputs.kernel_version }}
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Notification of build failure
        if: failure()
        run: |
          echo "The kernel compilation process has failed."
          echo "GitHub Action Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "Please check the 'Check Compilation Logs' step for more details."
          echo "You can also download the compilation logs from the 'Artifacts' section of this run."
          exit 1
